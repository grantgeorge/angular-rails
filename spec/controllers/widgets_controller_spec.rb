require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe WidgetsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Widget. As you add validations to Widget, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { widget: attributes_for(:widget) }
  }

  let(:invalid_attributes) {
    { widget: attributes_for(:invalid_widget) }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # WidgetsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  let(:widget) { create(:widget) }

  describe "GET #index" do
    context "when resources are found" do
      it "assigns all widgets as @widgets" do
        widget # call to use memoized widget
        get :index, {}, valid_session
        expect(assigns(:widgets)).to eq([widget])
      end

      it "responds with http status ok" do
        widget
        get :index, {}, valid_session
        expect(response).to have_http_status(:ok)
      end
    end

    context "when resources are not found" do
      it "responds with http status not_found" do
        get :index, {}, valid_session
        expect(response).to have_http_status(:bad_request)
      end
    end
  end

  describe "GET #show" do
    context "when resource is found" do
      it "responds with http status ok" do
        get :show, {:id => widget.to_param}, valid_session
        expect(response).to have_http_status(:ok)
      end

      it "assigns the requested widget as @widget" do
        get :show, {:id => widget.to_param}, valid_session
        expect(assigns(:widget)).to eq(widget)
      end
    end

    context "when resource is not found" do
      it "responds with http status not_found" do
        get :show, {:id => 99999}, valid_session
        expect(response).to have_http_status(:bad_request)
      end
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Widget" do
        expect {
          post :create, valid_attributes, valid_session
        }.to change(Widget, :count).by(1)
      end

      it "assigns a newly created widget as @widget" do
        post :create, valid_attributes, valid_session
        expect(assigns(:widget)).to be_a(Widget)
        expect(assigns(:widget)).to be_persisted
      end

      it "resopnds with ok" do
        post :create, valid_attributes, valid_session
        expect(response).to have_http_status(:ok)
      end
    end

    context "with invalid params" do
      it "responds with bad_request" do
        post :create, invalid_attributes, valid_session
        expect(response).to have_http_status(:bad_request)
      end
    end
  end

  describe "PUT #update", :focus => true do
    context "with valid params" do
      let(:new_attributes) {
        attributes_for(:widget, name: "test_new_name")
      }

      before :each do
        allow(Widget).to receive(:find) { widget }
      end

      it "updates the requested widget", :focus => true do
        put :update, {:id => widget.to_param, widget: new_attributes}, valid_session
        widget.reload
        expect(widget.name).to eq "test_new_name"
      end

      it "assigns the requested widget as @widget" do
        put :update, {:id => widget.to_param, widget: valid_attributes}, valid_session
        expect(assigns(:widget)).to eq(widget)
      end

      it "responds with ok" do
        put :update, {:id => widget.to_param, widget: valid_attributes}, valid_session
        expect(response).to have_http_status(:ok)
      end
    end

    context "with invalid params" do
      it "assigns the widget as @widget" do
        put :update, {:id => widget.to_param, :widget => invalid_attributes[:widget]}, valid_session
        expect(assigns(:widget)).to eq(widget)
      end

      it "responds with bad_request" do
        put :update, {:id => widget.to_param, :widget => invalid_attributes[:widget]}, valid_session
        expect(response).to have_http_status(:bad_request)
      end
    end
  end

  describe "DELETE #destroy" do

    context "when resource is found" do
      it "destroys the requested widget" do
        widget # call to use memoized widget
        expect {
          delete :destroy, {:id => widget.to_param}, valid_session
        }.to change(Widget, :count).by(-1)
      end

      it "responds with ok" do
        delete :destroy, {:id => widget.to_param}, valid_session
        expect(response).to have_http_status(:ok)
      end
    end

    context "when resource is not found" do
      it "responds with http status not_found" do
        delete :destroy, {:id => 99999}, valid_session
        expect(response).to have_http_status(:bad_request)
      end
    end
  end

end
